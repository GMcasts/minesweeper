<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 10;
win_triggered = false;
// starting with a 6x6 board
//build board
for(i=0;i&lt;6;i++){
    for(q=0;q&lt;6;q++){
        instance_create(i*128, q*128, o_tile);
    }
}
// builds empty board
board = ds_grid_create(6,6);
for(i=0;i&lt;6;i++){
    for(q=0;q&lt;6;q++){
        ds_grid_set(board,i,q, 1);
    }
}

//adds the bombs
bombs = determine_bombs();
flags = bombs;
bomb_location[0] = noone;
count = 0;
temp_bombs = bombs;
while(temp_bombs != 0) {
    rx = random_range(0,5); ry = random_range(0,5);
    if(!bomb(rx,ry)){
        ds_grid_set(board, rx, ry, 2);
        q[0] = rx; q[1] = ry;
        bomb_location[count] = q; count+=1;
        temp_bombs --;
    }
}

// fill in the proper bomb warnings
for(i=0;i&lt;6;i++){
    for(q=0;q&lt;6;q++){
        if(!bomb(i,q)){
            count_bombs(i, q);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.cant_click = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(o_board.flags == 0){
    if(check_end_game()==true &amp;&amp; !win_triggered){
        instance_create(x,y,o_winner);
        win_triggered = true;
    }
}

for(i=0;i&lt;=4;i++){
    if(device_mouse_x(i) &gt;= 0 &amp;&amp; device_mouse_x(i) &lt;= room_width &amp;&amp;
    device_mouse_y(i) &gt;= 800 &amp;&amp; device_mouse_y(i) &lt;= room_height &amp;&amp;
    device_mouse_check_button(i, mb_left) &amp;&amp; !global.pause)
      {
        instance_create(x,y,o_pause);
        global.cant_click = true;
      }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_font(f_ui);
draw_sprite(s_flag,0,100,800);
draw_text(150,800, string(flags));

draw_sprite(s_bomb, 0, 0, 800);
draw_text(50,800, string(bombs));

draw_text(250, 800, string(global.wins)+" / "+string(global.attempts)+" (Wins / Attempts)");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
